<?php

namespace Gestion\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RemboursementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RemboursementRepository extends EntityRepository
{
    /**
     * @param Membre $membre
     * @param  Activite $activite
     * @return mixed
     */
    public function getNbRemboursement($membre, $activite){

        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('SUM(r.quantite) as total')
            ->from($this->_entityName, 'r')
            ->leftJoin('r.membre','m')
            ->where('m.famille = :famille')
            ->setParameter(':famille', $membre->getFamille());
        if($activite->getType()->getCode()!='cinema'){
            $queryBuilder->andWhere('r.activite = :activite')
                ->setParameter(':activite', $activite);
        }else{
            $queryBuilder
                ->leftJoin('r.activite','a')
                ->leftJoin('a.type','t')
                ->andWhere('t.code = :activite')
                ->setParameter('activite', 'cinema');
        }
        if($activite->getPeriodicite()==12){
            $queryBuilder->andWhere('r.dateActivite >= :debut')
                ->setParameter(':debut', date('Y').'-01-01');
        }else{
            $queryBuilder->andWhere('r.dateActivite >= :debut')
                ->setParameter(':debut', date('Y-m').'-01');
        };

        // On récupère la Query à partir du QueryBuilder
        $query = $queryBuilder->getQuery();

        // On récupère les résultats à partir de la Query
        $resultats = $query->getResult();
        // On retourne ces résultats
        return $resultats[0]['total'];
    }

    public function getTotalRemboursements(){
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('SUM(r.montantParticipation) as total')
            ->from($this->_entityName, 'r')
			->where('r.valide IS NOT NULL')
            ->andWhere('r.created >= :debut')
            ->setParameter(':debut', date('Y').'-01-01');

        $query = $queryBuilder->getQuery();

        // On récupère les résultats à partir de la Query
        $resultats = $query->getResult();
        // On retourne ces résultats
        return $resultats[0]['total'];

    }
    public function getTotalRemboursementsAttente(){
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('SUM(r.montantParticipation) as total')
            ->from($this->_entityName, 'r')
            ->where('r.valide is NULL');

        $query = $queryBuilder->getQuery();

        // On récupère les résultats à partir de la Query
        $resultats = $query->getResult();
        // On retourne ces résultats
        return $resultats[0]['total'];

    }


    public function getTotalRemboursementsByAgence($agence){
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('SUM(r.montantParticipation) as total')
            ->from($this->_entityName, 'r')
            ->leftJoin('r.membre','m')
            ->leftJoin('m.famille','f')
            ->where('f.agence = :agence')
            ->setParameter(':agence', $agence)
            ->andWhere('r.created >= :debut')
            ->setParameter(':debut', date('Y').'-01-01');

        $query = $queryBuilder->getQuery();

        // On récupère les résultats à partir de la Query
        $resultats = $query->getResult();
        // On retourne ces résultats
        return $resultats[0]['total'];

    }


    public function getMonthRemboursements(){
        $queryBuilder = $this->_em->createQueryBuilder()
            ->select('r')
            ->from($this->_entityName, 'r')
            ->where('r.created >= :debut')
            ->setParameter(':debut', date('Y').'-'.date('m').'-01');

        $query = $queryBuilder->getQuery();

        // On récupère les résultats à partir de la Query
        $resultats = $query->getResult();
        // On retourne ces résultats
        return $resultats;

    }


}
